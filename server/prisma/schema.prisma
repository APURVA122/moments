// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInformation {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EventType {
  id          String @id @default(uuid())
  name        String @unique
  description String @db.Text
}

model LoginUser {
  id               String                  @id @default(uuid())
  projectName      String
  bookName         String
  dueDate          DateTime
  eventType        String
  eventDescription String
  userId           String
  createdAt        DateTime                @default(now())
  imageKey         String?
  uploadUrl        String?
  contributions    Contribution[]
  deadlines        ContributionDeadlines[]
  Order            Order[]
}

model FillYourDetails {
  id                       String    @id @default(uuid())
  first_name               String
  last_name                String
  email                    String    @unique
  relationship             String
  ExcludeFromOnlineVersion Boolean   @default(false)
  ExcludeFromPromotion     Boolean   @default(false)
  projectId                String
  created_at               DateTime  @default(now())
  updated_at               DateTime  @updatedAt
  contributions            Contribution[]
}

// Contribution model
model Contribution {
  id        String    @id @default(uuid())
  projectId String
  project   LoginUser @relation(fields: [projectId], references: [id], onDelete: Cascade)
  signature String
  pages     Page[] // One-to-many relationship with Page
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  fillYourDetailsId String?      // New field to link with FillYourDetails
  fillYourDetails  FillYourDetails? @relation(fields: [fillYourDetailsId], references: [id], onDelete: SetNull)
}

// Page model
model Page {
  id             String       @id @default(uuid())
  contributionId String
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  guid           String       @unique // Unique identifier for the page
  layoutId       Int // ID of the layout
  images         String[] // Array of image URLs (or null)
  message        String // Text content (e.g., from paragraph component)
  components     Component[] // One-to-many relationship with Component
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

// Component model
model Component {
  id        String   @id @default(uuid())
  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  type      String // 'heading', 'signature', 'paragraph', 'caption', 'photo'
  position  Json? // JSON field for position details
  size      Json // JSON field for size details
  styles    Json? // JSON field for styles details
  editor    Json? // JSON field for editor details
  value     String? // Text content for text-based components
  imageUrl  String?  @map("image_url") // Image URL for photo components
  original  Json? // JSON field for original image details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContributionDeadlines {
  id               String    @id @default(uuid())
  projectId        String
  project          LoginUser @relation(fields: [projectId], references: [id], onDelete: Cascade)
  calculate_date   DateTime?
  actual_deadline  DateTime?
  deadline_enabled Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    String
  projectId String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String    @id @default(uuid())
  projectId String
  project   LoginUser @relation(fields: [projectId], references: [id], onDelete: Cascade)
  total     Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
